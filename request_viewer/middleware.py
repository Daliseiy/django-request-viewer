import os, tracebackfrom django.conf import settingsfrom django.template.response import TemplateResponsefrom django.urls import reversefrom django.core.cache import cachefrom .conf import WHITELISTED_PATHS, DATETIME_FORMAT, LIVE_MONITORINGfrom .models import RequestModel, ResponseModel, Logger, TemplateResponseModelfrom .utils import is_whitelisted, get_time_lengthdefault_whitelist = [    os.path.normpath(path) for path in [reverse('request-viewer'),                                        reverse('modal-content'), settings.MEDIA_URL, settings.STATIC_URL]]WHITELISTED_PATHS.extend(default_whitelist)class RequestViewerMiddleware:    def __init__(self, get_response):        self.get_response = get_response        self.request_obj = {}        self.response_obj = {}    def __call__(self, request):        path = request.path        if not is_whitelisted(os.path.normpath(path), WHITELISTED_PATHS) and LIVE_MONITORING:            self.request_obj = RequestModel(request).__dict__            # obj, _ = Logger.objects.get_or_create(path=path)            cache.key_prefix = "request-viewer"            response = self.get_response(request)            if isinstance(response, TemplateResponse):                self.response_obj = TemplateResponseModel(response).__dict__            else:                self.response_obj = ResponseModel(response).__dict__            time_length = get_time_length(self.request_obj.get('request_timestamp'),                                          self.response_obj.get('response_timestamp'), DATETIME_FORMAT)            self.request_obj['time_length'] = time_length            parsed_data = dict(self.request_obj, **self.response_obj)                        old_data = cache.get(path)            if old_data:                if parsed_data not in old_data:                    old_data.append(parsed_data)                    cache.set(path, old_data, None)            else:                cache.set(path, [parsed_data], None)        return self.get_response(request)    